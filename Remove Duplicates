Given a string, the task is to remove duplicates from it. Expected time complexity O(n) where n is length of input string and extra space O(1) under the assumption that there are total 256 possible characters in a string.

Note: that original order of characters must be kept same. 

Input:
First line of the input is the number of test cases T. And first line of test case contains a string.

Output: 
Modified string without duplicates and same order of characters.

Constraints: 
1 <= T <= 15
1 <= |string|<= 1000

Example:
Input:
2
geeksforgeeks
geeks for geeks

Output:
geksfor
geks for

# Solution

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
 {
    public static String removeDuplicates(String input){
        Set<Character> set=new HashSet<Character>();
        String res="";
        
        for(int i=0;i<input.length();++i){
        char ch=input.charAt(i);
        if(set.contains(ch)){
            
        }else{
            set.add(ch);
            res=res+Character.toString(ch);
        }
        
        }
        return res;
        
    }
     
	public static void main (String[] args)
	 {
	 int t;
	 Scanner scan = new Scanner(System.in);
	 t=scan.nextInt();
	 scan.nextLine();
	 while(t>0){
	     String s = scan.nextLine();
	     String res = removeDuplicates(s);
	     System.out.println(res);
	     t--;
	 }
	 }
}
